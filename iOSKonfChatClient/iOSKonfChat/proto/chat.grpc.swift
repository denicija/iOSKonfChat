//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `ChatRoomClient`, then call methods of this protocol to make API calls.
public protocol ChatRoomClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: ChatRoomClientInterceptorFactoryProtocol? { get }

  func addMessage(
    _ request: ChatMessage,
    callOptions: CallOptions?
  ) -> UnaryCall<ChatMessage, ChatMessage>

  func connect(
    callOptions: CallOptions?,
    handler: @escaping (ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<ChatMessage, ChatMessage>
}

extension ChatRoomClientProtocol {
  public var serviceName: String {
    return "ChatRoom"
  }

  /// Sends a message
  ///
  /// - Parameters:
  ///   - request: Request to send to addMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addMessage(
    _ request: ChatMessage,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<ChatMessage, ChatMessage> {
    return self.makeUnaryCall(
      path: ChatRoomClientMetadata.Methods.addMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddMessageInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to connect
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func connect(
    callOptions: CallOptions? = nil,
    handler: @escaping (ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<ChatMessage, ChatMessage> {
    return self.makeBidirectionalStreamingCall(
      path: ChatRoomClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension ChatRoomClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "ChatRoomNIOClient")
public final class ChatRoomClient: ChatRoomClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: ChatRoomClientInterceptorFactoryProtocol?
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  public var interceptors: ChatRoomClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the ChatRoom service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ChatRoomClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

public struct ChatRoomNIOClient: ChatRoomClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ChatRoomClientInterceptorFactoryProtocol?

  /// Creates a client for the ChatRoom service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ChatRoomClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public protocol ChatRoomAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: ChatRoomClientInterceptorFactoryProtocol? { get }

  func makeAddMessageCall(
    _ request: ChatMessage,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<ChatMessage, ChatMessage>

  func makeConnectCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<ChatMessage, ChatMessage>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ChatRoomAsyncClientProtocol {
  public static var serviceDescriptor: GRPCServiceDescriptor {
    return ChatRoomClientMetadata.serviceDescriptor
  }

  public var interceptors: ChatRoomClientInterceptorFactoryProtocol? {
    return nil
  }

  public func makeAddMessageCall(
    _ request: ChatMessage,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<ChatMessage, ChatMessage> {
    return self.makeAsyncUnaryCall(
      path: ChatRoomClientMetadata.Methods.addMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddMessageInterceptors() ?? []
    )
  }

  public func makeConnectCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<ChatMessage, ChatMessage> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: ChatRoomClientMetadata.Methods.connect.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension ChatRoomAsyncClientProtocol {
  public func addMessage(
    _ request: ChatMessage,
    callOptions: CallOptions? = nil
  ) async throws -> ChatMessage {
    return try await self.performAsyncUnaryCall(
      path: ChatRoomClientMetadata.Methods.addMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeaddMessageInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<ChatMessage> where RequestStream: Sequence, RequestStream.Element == ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: ChatRoomClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }

  public func connect<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<ChatMessage> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: ChatRoomClientMetadata.Methods.connect.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeconnectInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct ChatRoomAsyncClient: ChatRoomAsyncClientProtocol {
  public var channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: ChatRoomClientInterceptorFactoryProtocol?

  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: ChatRoomClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

public protocol ChatRoomClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'addMessage'.
  func makeaddMessageInterceptors() -> [ClientInterceptor<ChatMessage, ChatMessage>]

  /// - Returns: Interceptors to use when invoking 'connect'.
  func makeconnectInterceptors() -> [ClientInterceptor<ChatMessage, ChatMessage>]
}

public enum ChatRoomClientMetadata {
  public static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatRoom",
    fullName: "ChatRoom",
    methods: [
      ChatRoomClientMetadata.Methods.addMessage,
      ChatRoomClientMetadata.Methods.connect,
    ]
  )

  public enum Methods {
    public static let addMessage = GRPCMethodDescriptor(
      name: "addMessage",
      path: "/ChatRoom/addMessage",
      type: GRPCCallType.unary
    )

    public static let connect = GRPCMethodDescriptor(
      name: "connect",
      path: "/ChatRoom/connect",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

