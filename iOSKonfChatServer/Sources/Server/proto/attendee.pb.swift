// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: attendee.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Attendee {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var email: String = String()

  public var phoneNumber: String = String()

  public var photo: Data = Data()

  public var foodPreferences: [String] = []

  public var allergies: [String] = []

  public var attendeeType: Attendee.AttendeeType = .attendee

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum AttendeeType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case attendee // = 0
    case speaker // = 1
    case organizer // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .attendee
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .attendee
      case 1: self = .speaker
      case 2: self = .organizer
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .attendee: return 0
      case .speaker: return 1
      case .organizer: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Attendee.AttendeeType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Attendee.AttendeeType] = [
    .attendee,
    .speaker,
    .organizer,
  ]
}

#endif  // swift(>=4.2)

#if swift(>=5.5) && canImport(_Concurrency)
extension Attendee: @unchecked Sendable {}
extension Attendee.AttendeeType: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Attendee: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "Attendee"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "email"),
    3: .standard(proto: "phone_number"),
    4: .same(proto: "photo"),
    5: .standard(proto: "food_preferences"),
    6: .same(proto: "allergies"),
    7: .standard(proto: "attendee_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.email) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.photo) }()
      case 5: try { try decoder.decodeRepeatedStringField(value: &self.foodPreferences) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.allergies) }()
      case 7: try { try decoder.decodeSingularEnumField(value: &self.attendeeType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 2)
    }
    if !self.phoneNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 3)
    }
    if !self.photo.isEmpty {
      try visitor.visitSingularBytesField(value: self.photo, fieldNumber: 4)
    }
    if !self.foodPreferences.isEmpty {
      try visitor.visitRepeatedStringField(value: self.foodPreferences, fieldNumber: 5)
    }
    if !self.allergies.isEmpty {
      try visitor.visitRepeatedStringField(value: self.allergies, fieldNumber: 6)
    }
    if self.attendeeType != .attendee {
      try visitor.visitSingularEnumField(value: self.attendeeType, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Attendee, rhs: Attendee) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.email != rhs.email {return false}
    if lhs.phoneNumber != rhs.phoneNumber {return false}
    if lhs.photo != rhs.photo {return false}
    if lhs.foodPreferences != rhs.foodPreferences {return false}
    if lhs.allergies != rhs.allergies {return false}
    if lhs.attendeeType != rhs.attendeeType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Attendee.AttendeeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ATTENDEE"),
    1: .same(proto: "SPEAKER"),
    2: .same(proto: "ORGANIZER"),
  ]
}
